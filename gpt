
# ChatGPT Coding Diary

## Project Name: _[Insert project name]_

### Date: _[Insert date]_

---

## 1. **Task/Problem Description**

Briefly describe the problem you're trying to solve or the task you're working on.

Example:
> I need to write a program that sorts a list of integers in ascending order.

---

## 2. **Initial Approach/Code**

Describe the initial approach you took to solving the problem. If you started writing code, include it here.

```python
# Example: Initial sorting function
def sort_numbers(numbers):
    return sorted(numbers)
```

- What was your plan for solving the problem?
- Did you have any initial thoughts or strategies before using ChatGPT?

---

## 3. **Interaction with ChatGPT**

### Questions/Requests to ChatGPT
Write down the questions or requests you made to ChatGPT. 
Also include what code from ChatGPT you are unsure of and craft a question that asks for further clarification. 
 For example:

- "How do I reverse a list in Python?"
- "Can you suggest a more efficient way to sort a list?"
- Why did ChatGPT opt for create element when my teacher suggested insertAdjacentHTML?

```text
# Example prompt to ChatGPT:
How can I optimize this sorting function for large datasets?
```

---

## 4. **ChatGPT's Suggestions/Code Changes**

Record the code or suggestions ChatGPT provided. Include any changes or improvements ChatGPT suggested and how it influenced your approach.

```python
# ChatGPT suggested using a custom sorting algorithm to improve efficiency
def optimized_sort(numbers):
    # Implementation of a more efficient sorting algorithm
    pass
```

- What was ChatGPT's solution or suggestion?
- How did it differ from your original approach?

---

## 5. **Reflection on Changes**

Reflect on the changes made to your code after ChatGPT's suggestions. Answer the following questions:

- Why do you think ChatGPT's suggestions are helpful or relevant?
- Did the suggestions improve your code? How?
- Did you understand why the changes were made, or are you still uncertain about some parts?

Example:
> ChatGPT recommended using a more efficient sorting algorithm like quicksort. I think this will improve the runtime for large inputs, but I need to review the algorithm's complexity to fully understand its advantages.

---

## 6. **Testing and Results**

After making the changes, did you test your code? What were the results?

- Did you run any tests (e.g., unit tests, edge cases)?
- Did the code work as expected after incorporating ChatGPT's changes?

```python
# Example: Testing the updated sorting function
numbers = [5, 2, 9, 1]
print(optimized_sort(numbers))  # Expected output: [1, 2, 5, 9]
```

- Did you encounter any bugs or issues during testing?

---

## 7. **What Did You Learn?**

In this section, reflect on what you learned from this coding session. Did you gain any new insights, or were there areas you still struggled with? 

Example:
> I learned how to implement an efficient sorting algorithm, and I now understand the time complexity differences between various sorting methods.




6_key_rhythm_game
11/19
make a 4 key rhythm game in python using pygame, this was are starting base code we took everything and made adjustments to it, we wanted it to stand out a bit more so we made it 6 keys instead of the usual 4 

11/20
how to import image in python pygame, 
how to make sure the image file is in the same directory,      I didn't understand these two so I found a youtube video.


11/21
Make it so theres a line and whatever below the line works, I took all the code (its a lot) 
Make user input number of notes, (took all the code) learned that its a lot of code for something like that, it's easier on turtle but i think its better to just keep everything organized in pygame
Border around notes, and line seperating the notes (took all code) 

how to add sound to pygame, realized it was the same as an image it just has to be in a specific format, I was able to record something,email it to myself and convert the file to mp3

the changed made were overall small adjustments making the game more enjoyable and music related, 
11/22 
doing this 

OWN CHANGES
changed from 4-6 notes
fixed it so the notes spawned in the right places tweaking the screen size
chaning the color so it randomizes each time, adjusting it so theres no change of the colors being the same. 
label at the bottom which key is assigned to each note.

I learned that chatgpt is useful but sometimes an include weird uneccesary code. Small adjustments are needed which chatgpt can help with, its better to use it with small blocks of code rather than larger blocks. We learned that we had to work together properly and communicate as well installing pygame/different packages together. 